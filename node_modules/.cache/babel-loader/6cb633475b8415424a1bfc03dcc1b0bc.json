{"ast":null,"code":"'use strict';\n\nvar Mexp = require('./math_function.js');\n\nfunction inc(arr, val) {\n  for (var i = 0; i < arr.length; i++) {\n    arr[i] += val;\n  }\n\n  return arr;\n}\n\nvar tokens = [{\n  token: 'sin',\n  show: 'sin',\n  type: 0,\n  value: Mexp.math.sin\n}, {\n  token: 'cos',\n  show: 'cos',\n  type: 0,\n  value: Mexp.math.cos\n}, {\n  token: 'tan',\n  show: 'tan',\n  type: 0,\n  value: Mexp.math.tan\n}, {\n  token: 'pi',\n  show: '&pi;',\n  type: 3,\n  value: 'PI'\n}, {\n  token: '(',\n  show: '(',\n  type: 4,\n  value: '('\n}, {\n  token: ')',\n  show: ')',\n  type: 5,\n  value: ')'\n}, {\n  token: 'P',\n  show: 'P',\n  type: 10,\n  value: Mexp.math.P\n}, {\n  token: 'C',\n  show: 'C',\n  type: 10,\n  value: Mexp.math.C\n}, {\n  token: ' ',\n  show: ' ',\n  type: 14,\n  value: ' '.anchor\n}, {\n  token: 'asin',\n  show: 'asin',\n  type: 0,\n  value: Mexp.math.asin\n}, {\n  token: 'acos',\n  show: 'acos',\n  type: 0,\n  value: Mexp.math.acos\n}, {\n  token: 'atan',\n  show: 'atan',\n  type: 0,\n  value: Mexp.math.atan\n}, {\n  token: '7',\n  show: '7',\n  type: 1,\n  value: '7'\n}, {\n  token: '8',\n  show: '8',\n  type: 1,\n  value: '8'\n}, {\n  token: '9',\n  show: '9',\n  type: 1,\n  value: '9'\n}, {\n  token: 'int',\n  show: 'Int',\n  type: 0,\n  value: Math.floor\n}, {\n  token: 'cosh',\n  show: 'cosh',\n  type: 0,\n  value: Mexp.math.cosh\n}, {\n  token: 'acosh',\n  show: 'acosh',\n  type: 0,\n  value: Mexp.math.acosh\n}, {\n  token: 'ln',\n  show: ' ln',\n  type: 0,\n  value: Math.log\n}, {\n  token: '^',\n  show: '^',\n  type: 10,\n  value: Math.pow\n}, {\n  token: 'root',\n  show: 'root',\n  type: 0,\n  value: Math.sqrt\n}, {\n  token: '4',\n  show: '4',\n  type: 1,\n  value: '4'\n}, {\n  token: '5',\n  show: '5',\n  type: 1,\n  value: '5'\n}, {\n  token: '6',\n  show: '6',\n  type: 1,\n  value: '6'\n}, {\n  token: '/',\n  show: '&divide;',\n  type: 2,\n  value: Mexp.math.div\n}, {\n  token: '!',\n  show: '!',\n  type: 7,\n  value: Mexp.math.fact\n}, {\n  token: 'tanh',\n  show: 'tanh',\n  type: 0,\n  value: Mexp.math.tanh\n}, {\n  token: 'atanh',\n  show: 'atanh',\n  type: 0,\n  value: Mexp.math.atanh\n}, {\n  token: 'Mod',\n  show: ' Mod ',\n  type: 2,\n  value: Mexp.math.mod\n}, {\n  token: '1',\n  show: '1',\n  type: 1,\n  value: '1'\n}, {\n  token: '2',\n  show: '2',\n  type: 1,\n  value: '2'\n}, {\n  token: '3',\n  show: '3',\n  type: 1,\n  value: '3'\n}, {\n  token: '*',\n  show: '&times;',\n  type: 2,\n  value: Mexp.math.mul\n}, {\n  token: 'sinh',\n  show: 'sinh',\n  type: 0,\n  value: Mexp.math.sinh\n}, {\n  token: 'asinh',\n  show: 'asinh',\n  type: 0,\n  value: Mexp.math.asinh\n}, {\n  token: 'e',\n  show: 'e',\n  type: 3,\n  value: 'E'\n}, {\n  token: 'log',\n  show: ' log',\n  type: 0,\n  value: Mexp.math.log\n}, {\n  token: '0',\n  show: '0',\n  type: 1,\n  value: '0'\n}, {\n  token: '.',\n  show: '.',\n  type: 6,\n  value: '.'\n}, {\n  token: '+',\n  show: '+',\n  type: 9,\n  value: Mexp.math.add\n}, {\n  token: '-',\n  show: '-',\n  type: 9,\n  value: Mexp.math.sub\n}, {\n  token: ',',\n  show: ',',\n  type: 11,\n  value: ','\n}, {\n  token: 'Sigma',\n  show: '&Sigma;',\n  type: 12,\n  value: Mexp.math.sigma\n}, {\n  token: 'n',\n  show: 'n',\n  type: 13,\n  value: 'n'\n}, {\n  token: 'Pi',\n  show: '&Pi;',\n  type: 12,\n  value: Mexp.math.Pi\n}, {\n  token: 'pow',\n  show: 'pow',\n  type: 8,\n  value: Math.pow,\n  numberOfArguments: 2\n}, {\n  token: '&',\n  show: '&',\n  type: 9,\n  value: Mexp.math.and\n}];\nvar preced = {\n  0: 11,\n  1: 0,\n  2: 3,\n  3: 0,\n  4: 0,\n  5: 0,\n  6: 0,\n  7: 11,\n  8: 11,\n  9: 1,\n  10: 10,\n  11: 0,\n  12: 11,\n  13: 0,\n  14: -1,\n  15: 11 // will be filtered after lexer\n\n}; // stores precedence by types\n\nfor (var i = 0; i < tokens.length; i++) {\n  tokens[i].precedence = preced[tokens[i].type];\n}\n\nvar type0 = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  9: true,\n  12: true,\n  13: true,\n  14: true,\n  15: true\n}; // type2:true,type4:true,type9:true,type11:true,type21:true,type22\n\nvar type1 = {\n  0: true,\n  1: true,\n  2: true,\n  3: true,\n  4: true,\n  5: true,\n  6: true,\n  7: true,\n  8: true,\n  9: true,\n  10: true,\n  11: true,\n  12: true,\n  13: true,\n  15: true\n}; // type3:true,type5:true,type7:true,type23\n\nvar type1Asterick = {\n  0: true,\n  3: true,\n  4: true,\n  8: true,\n  12: true,\n  13: true,\n  15: true\n};\nvar empty = {};\nvar type3Asterick = {\n  0: true,\n  1: true,\n  3: true,\n  4: true,\n  6: true,\n  8: true,\n  12: true,\n  13: true,\n  15: true\n}; // type_5:true,type_7:true,type_23\n\nvar type6 = {\n  1: true\n};\nvar newAr = [[], ['1', '2', '3', '7', '8', '9', '4', '5', '6', '+', '-', '*', '/', '(', ')', '^', '!', 'P', 'C', 'e', '0', '.', ',', 'n', ' ', '&'], ['pi', 'ln', 'Pi'], ['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'], ['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'], ['acosh', 'atanh', 'asinh', 'Sigma']];\n\nfunction match(str1, str2, i, x) {\n  for (var f = 0; f < x; f++) {\n    if (str1[i + f] !== str2[f]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nMexp.tokenTypes = {\n  FUNCTION_WITH_ONE_ARG: 0,\n  NUMBER: 1,\n  BINARY_OPERATOR_HIGH_PRECENDENCE: 2,\n  CONSTANT: 3,\n  OPENING_PARENTHESIS: 4,\n  CLOSING_PARENTHESIS: 5,\n  DECIMAL: 6,\n  POSTFIX_FUNCTION_WITH_ONE_ARG: 7,\n  FUNCTION_WITH_N_ARGS: 8,\n  BINARY_OPERATOR_LOW_PRECENDENCE: 9,\n  BINARY_OPERATOR_PERMUTATION: 10,\n  COMMA: 11,\n  EVALUATED_FUNCTION: 12,\n  EVALUATED_FUNCTION_PARAMETER: 13,\n  SPACE: 14\n};\n/**\r\n  \r\n  0 : function with syntax function_name(Maths_exp)\r\n  1 : numbers\r\n  2 : binary operators like * / Mod left associate and same precedence\r\n  3 : Math constant values like e,pi,Cruncher ans\r\n  4 : opening bracket\r\n  5 : closing bracket\r\n  6 : decimal\r\n  7 : function with syntax (Math_exp)function_name\r\n  8: function with syntax function_name(Math_exp1,Math_exp2)\r\n  9 : binary operator like +,-\r\n  10: binary operator like P C or ^\r\n  11: ,\r\n  12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n  13: variable of Sigma function\r\n */\n\nMexp.addToken = function (newTokens) {\n  for (var i = 0; i < newTokens.length; i++) {\n    var x = newTokens[i].token.length;\n    var temp = -1;\n\n    if (newTokens[i].type === Mexp.tokenTypes.FUNCTION_WITH_N_ARGS && newTokens[i].numberOfArguments === undefined) {\n      newTokens[i].numberOfArguments = 2;\n    } // newAr is a specially designed data structure index of 1d array = length of tokens\n\n\n    newAr[x] = newAr[x] || [];\n\n    for (var y = 0; y < newAr[x].length; y++) {\n      if (newTokens[i].token === newAr[x][y]) {\n        temp = indexOfToken(newAr[x][y], tokens);\n        break;\n      }\n    }\n\n    if (temp === -1) {\n      tokens.push(newTokens[i]);\n      newTokens[i].precedence = preced[newTokens[i].type];\n\n      if (newAr.length <= newTokens[i].token.length) {\n        newAr[newTokens[i].token.length] = [];\n      }\n\n      newAr[newTokens[i].token.length].push(newTokens[i].token);\n    } else {\n      // overwrite\n      tokens[temp] = newTokens[i];\n      newTokens[i].precedence = preced[newTokens[i].type];\n    }\n  }\n};\n\nfunction indexOfToken(key, tokens) {\n  for (var search = 0; search < tokens.length; search++) {\n    if (tokens[search].token === key) return search;\n  }\n\n  return -1;\n}\n\nfunction tokenize(string) {\n  var nodes = [];\n  var length = string.length;\n  var key, x, y;\n\n  for (var i = 0; i < length; i++) {\n    if (i < length - 1 && string[i] === ' ' && string[i + 1] === ' ') {\n      continue;\n    }\n\n    key = '';\n\n    for (x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i; x > 0; x--) {\n      if (newAr[x] === undefined) continue;\n\n      for (y = 0; y < newAr[x].length; y++) {\n        if (match(string, newAr[x][y], i, x)) {\n          key = newAr[x][y];\n          y = newAr[x].length;\n          x = 0;\n        }\n      }\n    }\n\n    i += key.length - 1;\n\n    if (key === '') {\n      throw new Mexp.Exception(\"Can't understand after \" + string.slice(i));\n    }\n\n    nodes.push(tokens[indexOfToken(key, tokens)]);\n  }\n\n  return nodes;\n}\n\nvar changeSignObj = {\n  value: Mexp.math.changeSign,\n  type: 0,\n  pre: 21,\n  show: '-'\n};\nvar closingParObj = {\n  value: ')',\n  show: ')',\n  type: 5,\n  pre: 0\n};\nvar openingParObj = {\n  value: '(',\n  type: 4,\n  pre: 0,\n  show: '('\n};\n\nMexp.lex = function (inp, tokens) {\n  'use strict';\n\n  var str = [openingParObj];\n  var ptc = []; // Parenthesis to close at the beginning is after one token\n\n  var inpStr = inp;\n  var allowed = type0;\n  var bracToClose = 0;\n  var asterick = empty;\n  var prevKey = '';\n  var i;\n\n  if (typeof tokens !== 'undefined') {\n    Mexp.addToken(tokens);\n  }\n\n  var obj = {};\n  var nodes = tokenize(inpStr);\n\n  for (i = 0; i < nodes.length; i++) {\n    var node = nodes[i];\n\n    if (node.type === 14) {\n      if (i > 0 && i < nodes.length - 1 && nodes[i + 1].type === 1 && (nodes[i - 1].type === 1 || nodes[i - 1].type === 6)) {\n        throw new Mexp.Exception('Unexpected Space');\n      }\n\n      continue;\n    }\n\n    var cToken = node.token;\n    var cType = node.type;\n    var cEv = node.value;\n    var cPre = node.precedence;\n    var cShow = node.show;\n    var pre = str[str.length - 1];\n    var j;\n\n    for (j = ptc.length; j--;) {\n      // loop over ptc\n      if (ptc[j] === 0) {\n        if ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\n          if (allowed[cType] !== true) {\n            throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey);\n          }\n\n          str.push(closingParObj);\n          allowed = type1;\n          asterick = type3Asterick;\n          ptc.pop();\n        }\n      } else break;\n    }\n\n    if (allowed[cType] !== true) {\n      throw new Mexp.Exception(cToken + ' is not allowed after ' + prevKey);\n    }\n\n    if (asterick[cType] === true) {\n      cType = 2;\n      cEv = Mexp.math.mul;\n      cShow = '&times;';\n      cPre = 3;\n      i = i - 1;\n    }\n\n    obj = {\n      value: cEv,\n      type: cType,\n      pre: cPre,\n      show: cShow,\n      numberOfArguments: node.numberOfArguments\n    };\n\n    if (cType === 0) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(2);\n      } // bracToClose++\n\n    } else if (cType === 1) {\n      if (pre.type === 1) {\n        pre.value += cEv;\n        inc(ptc, 1);\n      } else {\n        str.push(obj);\n      }\n\n      allowed = type1;\n      asterick = type1Asterick;\n    } else if (cType === 2) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 3) {\n      // constant\n      str.push(obj);\n      allowed = type1;\n      asterick = type3Asterick;\n    } else if (cType === 4) {\n      inc(ptc, 1);\n      bracToClose++;\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 5) {\n      if (!bracToClose) {\n        throw new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!');\n      }\n\n      bracToClose--;\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n      inc(ptc, 1);\n    } else if (cType === 6) {\n      if (pre.hasDec) {\n        throw new Mexp.Exception('Two decimals are not allowed in one number');\n      }\n\n      if (pre.type !== 1) {\n        pre = {\n          value: 0,\n          type: 1,\n          pre: 0\n        }; // pre needs to be changed as it will the last value now to be safe in later code\n\n        str.push(pre); // inc(ptc, 1)\n      }\n\n      allowed = type6;\n      inc(ptc, 1);\n      asterick = empty;\n      pre.value += cEv;\n      pre.hasDec = true;\n    } else if (cType === 7) {\n      allowed = type1;\n      asterick = type3Asterick;\n      inc(ptc, 1);\n      str.push(obj);\n    }\n\n    if (cType === 8) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, node.numberOfArguments + 2);\n      str.push(obj); // str.push(openingParObj)\n\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(node.numberOfArguments + 2);\n      }\n    } else if (cType === 9) {\n      if (pre.type === 9) {\n        if (pre.value === Mexp.math.add) {\n          pre.value = cEv;\n          pre.show = cShow;\n          inc(ptc, 1);\n        } else if (pre.value === Mexp.math.sub && cShow === '-') {\n          pre.value = Mexp.math.add;\n          pre.show = '+';\n          inc(ptc, 1);\n        }\n      } else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\n        // changesign only when negative is found\n        if (cToken === '-') {\n          // do nothing for + token\n          // don't add with the above if statement as that will run the else statement of parent if on Ctoken +\n          allowed = type0;\n          asterick = empty;\n          inc(ptc, 2).push(2);\n          str.push(changeSignObj);\n          str.push(openingParObj);\n        }\n      } else {\n        str.push(obj);\n        inc(ptc, 2);\n      }\n\n      allowed = type0;\n      asterick = empty;\n    } else if (cType === 10) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 2);\n      str.push(obj);\n    } else if (cType === 11) {\n      allowed = type0;\n      asterick = empty;\n      str.push(obj);\n    } else if (cType === 12) {\n      allowed = type0;\n      asterick = empty;\n      inc(ptc, 6);\n      str.push(obj);\n\n      if (nodes[i + 1].type !== 4) {\n        str.push(openingParObj);\n        ptc.push(6);\n      }\n    } else if (cType === 13) {\n      allowed = type1;\n      asterick = type3Asterick;\n      str.push(obj);\n    }\n\n    inc(ptc, -1);\n    prevKey = cToken;\n  }\n\n  for (j = ptc.length; j--;) {\n    // loop over ptc\n    str.push(closingParObj);\n  }\n\n  if (allowed[5] !== true) {\n    throw new Mexp.Exception('complete the expression');\n  }\n\n  while (bracToClose--) {\n    str.push(closingParObj);\n  }\n\n  str.push(closingParObj); //        console.log(str);\n\n  return new Mexp(str);\n};\n\nmodule.exports = Mexp;","map":{"version":3,"sources":["/Users/romanpopov/Documents/GitHub/chartjs-example-react/node_modules/math-expression-evaluator/src/lexer.js"],"names":["Mexp","require","inc","arr","val","i","length","tokens","token","show","type","value","math","sin","cos","tan","P","C","anchor","asin","acos","atan","Math","floor","cosh","acosh","log","pow","sqrt","div","fact","tanh","atanh","mod","mul","sinh","asinh","add","sub","sigma","Pi","numberOfArguments","and","preced","precedence","type0","type1","type1Asterick","empty","type3Asterick","type6","newAr","match","str1","str2","x","f","tokenTypes","FUNCTION_WITH_ONE_ARG","NUMBER","BINARY_OPERATOR_HIGH_PRECENDENCE","CONSTANT","OPENING_PARENTHESIS","CLOSING_PARENTHESIS","DECIMAL","POSTFIX_FUNCTION_WITH_ONE_ARG","FUNCTION_WITH_N_ARGS","BINARY_OPERATOR_LOW_PRECENDENCE","BINARY_OPERATOR_PERMUTATION","COMMA","EVALUATED_FUNCTION","EVALUATED_FUNCTION_PARAMETER","SPACE","addToken","newTokens","temp","undefined","y","indexOfToken","push","key","search","tokenize","string","nodes","Exception","slice","changeSignObj","changeSign","pre","closingParObj","openingParObj","lex","inp","str","ptc","inpStr","allowed","bracToClose","asterick","prevKey","obj","node","cToken","cType","cEv","cPre","cShow","j","indexOf","pop","hasDec","module","exports"],"mappings":"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","sourcesContent":["'use strict'\r\nvar Mexp = require('./math_function.js')\r\nfunction inc(arr, val) {\r\n\tfor (var i = 0; i < arr.length; i++) {\r\n\t\tarr[i] += val\r\n\t}\r\n\treturn arr\r\n}\r\nvar tokens = [\r\n\t{ token: 'sin', show: 'sin', type: 0, value: Mexp.math.sin },\r\n\t{ token: 'cos', show: 'cos', type: 0, value: Mexp.math.cos },\r\n\t{ token: 'tan', show: 'tan', type: 0, value: Mexp.math.tan },\r\n\t{ token: 'pi', show: '&pi;', type: 3, value: 'PI' },\r\n\t{ token: '(', show: '(', type: 4, value: '(' },\r\n\t{ token: ')', show: ')', type: 5, value: ')' },\r\n\t{ token: 'P', show: 'P', type: 10, value: Mexp.math.P },\r\n\t{ token: 'C', show: 'C', type: 10, value: Mexp.math.C },\r\n\t{ token: ' ', show: ' ', type: 14, value: ' '.anchor },\r\n\t{ token: 'asin', show: 'asin', type: 0, value: Mexp.math.asin },\r\n\t{ token: 'acos', show: 'acos', type: 0, value: Mexp.math.acos },\r\n\t{ token: 'atan', show: 'atan', type: 0, value: Mexp.math.atan },\r\n\t{ token: '7', show: '7', type: 1, value: '7' },\r\n\t{ token: '8', show: '8', type: 1, value: '8' },\r\n\t{ token: '9', show: '9', type: 1, value: '9' },\r\n\t{ token: 'int', show: 'Int', type: 0, value: Math.floor },\r\n\t{ token: 'cosh', show: 'cosh', type: 0, value: Mexp.math.cosh },\r\n\t{ token: 'acosh', show: 'acosh', type: 0, value: Mexp.math.acosh },\r\n\t{ token: 'ln', show: ' ln', type: 0, value: Math.log },\r\n\t{ token: '^', show: '^', type: 10, value: Math.pow },\r\n\t{ token: 'root', show: 'root', type: 0, value: Math.sqrt },\r\n\t{ token: '4', show: '4', type: 1, value: '4' },\r\n\t{ token: '5', show: '5', type: 1, value: '5' },\r\n\t{ token: '6', show: '6', type: 1, value: '6' },\r\n\t{ token: '/', show: '&divide;', type: 2, value: Mexp.math.div },\r\n\t{ token: '!', show: '!', type: 7, value: Mexp.math.fact },\r\n\t{ token: 'tanh', show: 'tanh', type: 0, value: Mexp.math.tanh },\r\n\t{ token: 'atanh', show: 'atanh', type: 0, value: Mexp.math.atanh },\r\n\t{ token: 'Mod', show: ' Mod ', type: 2, value: Mexp.math.mod },\r\n\t{ token: '1', show: '1', type: 1, value: '1' },\r\n\t{ token: '2', show: '2', type: 1, value: '2' },\r\n\t{ token: '3', show: '3', type: 1, value: '3' },\r\n\t{ token: '*', show: '&times;', type: 2, value: Mexp.math.mul },\r\n\t{ token: 'sinh', show: 'sinh', type: 0, value: Mexp.math.sinh },\r\n\t{ token: 'asinh', show: 'asinh', type: 0, value: Mexp.math.asinh },\r\n\t{ token: 'e', show: 'e', type: 3, value: 'E' },\r\n\t{ token: 'log', show: ' log', type: 0, value: Mexp.math.log },\r\n\t{ token: '0', show: '0', type: 1, value: '0' },\r\n\t{ token: '.', show: '.', type: 6, value: '.' },\r\n\t{ token: '+', show: '+', type: 9, value: Mexp.math.add },\r\n\t{ token: '-', show: '-', type: 9, value: Mexp.math.sub },\r\n\t{ token: ',', show: ',', type: 11, value: ',' },\r\n\t{ token: 'Sigma', show: '&Sigma;', type: 12, value: Mexp.math.sigma },\r\n\t{ token: 'n', show: 'n', type: 13, value: 'n' },\r\n\t{ token: 'Pi', show: '&Pi;', type: 12, value: Mexp.math.Pi },\r\n\t{ token: 'pow', show: 'pow', type: 8, value: Math.pow, numberOfArguments: 2 },\r\n\t{ token: '&', show: '&', type: 9, value: Mexp.math.and },\r\n]\r\nvar preced = {\r\n\t0: 11,\r\n\t1: 0,\r\n\t2: 3,\r\n\t3: 0,\r\n\t4: 0,\r\n\t5: 0,\r\n\t6: 0,\r\n\t7: 11,\r\n\t8: 11,\r\n\t9: 1,\r\n\t10: 10,\r\n\t11: 0,\r\n\t12: 11,\r\n\t13: 0,\r\n\t14: -1,\r\n\t15: 11, // will be filtered after lexer\r\n} // stores precedence by types\r\nfor (var i = 0; i < tokens.length; i++) {\r\n\ttokens[i].precedence = preced[tokens[i].type]\r\n}\r\nvar type0 = {\r\n\t0: true,\r\n\t1: true,\r\n\t3: true,\r\n\t4: true,\r\n\t6: true,\r\n\t8: true,\r\n\t9: true,\r\n\t12: true,\r\n\t13: true,\r\n\t14: true,\r\n\t15: true,\r\n} // type2:true,type4:true,type9:true,type11:true,type21:true,type22\r\nvar type1 = {\r\n\t0: true,\r\n\t1: true,\r\n\t2: true,\r\n\t3: true,\r\n\t4: true,\r\n\t5: true,\r\n\t6: true,\r\n\t7: true,\r\n\t8: true,\r\n\t9: true,\r\n\t10: true,\r\n\t11: true,\r\n\t12: true,\r\n\t13: true,\r\n\t15: true,\r\n} // type3:true,type5:true,type7:true,type23\r\nvar type1Asterick = {\r\n\t0: true,\r\n\t3: true,\r\n\t4: true,\r\n\t8: true,\r\n\t12: true,\r\n\t13: true,\r\n\t15: true,\r\n}\r\nvar empty = {}\r\nvar type3Asterick = {\r\n\t0: true,\r\n\t1: true,\r\n\t3: true,\r\n\t4: true,\r\n\t6: true,\r\n\t8: true,\r\n\t12: true,\r\n\t13: true,\r\n\t15: true,\r\n} // type_5:true,type_7:true,type_23\r\nvar type6 = {\r\n\t1: true,\r\n}\r\nvar newAr = [\r\n\t[],\r\n\t[\r\n\t\t'1',\r\n\t\t'2',\r\n\t\t'3',\r\n\t\t'7',\r\n\t\t'8',\r\n\t\t'9',\r\n\t\t'4',\r\n\t\t'5',\r\n\t\t'6',\r\n\t\t'+',\r\n\t\t'-',\r\n\t\t'*',\r\n\t\t'/',\r\n\t\t'(',\r\n\t\t')',\r\n\t\t'^',\r\n\t\t'!',\r\n\t\t'P',\r\n\t\t'C',\r\n\t\t'e',\r\n\t\t'0',\r\n\t\t'.',\r\n\t\t',',\r\n\t\t'n',\r\n\t\t' ',\r\n\t\t'&',\r\n\t],\r\n\t['pi', 'ln', 'Pi'],\r\n\t['sin', 'cos', 'tan', 'Del', 'int', 'Mod', 'log', 'pow'],\r\n\t['asin', 'acos', 'atan', 'cosh', 'root', 'tanh', 'sinh'],\r\n\t['acosh', 'atanh', 'asinh', 'Sigma'],\r\n]\r\n\r\nfunction match(str1, str2, i, x) {\r\n\tfor (var f = 0; f < x; f++) {\r\n\t\tif (str1[i + f] !== str2[f]) {\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\treturn true\r\n}\r\nMexp.tokenTypes = {\r\n\tFUNCTION_WITH_ONE_ARG: 0,\r\n\tNUMBER: 1,\r\n\tBINARY_OPERATOR_HIGH_PRECENDENCE: 2,\r\n\tCONSTANT: 3,\r\n\tOPENING_PARENTHESIS: 4,\r\n\tCLOSING_PARENTHESIS: 5,\r\n\tDECIMAL: 6,\r\n\tPOSTFIX_FUNCTION_WITH_ONE_ARG: 7,\r\n\tFUNCTION_WITH_N_ARGS: 8,\r\n\tBINARY_OPERATOR_LOW_PRECENDENCE: 9,\r\n\tBINARY_OPERATOR_PERMUTATION: 10,\r\n\tCOMMA: 11,\r\n\tEVALUATED_FUNCTION: 12,\r\n\tEVALUATED_FUNCTION_PARAMETER: 13,\r\n\tSPACE: 14,\r\n}\r\n/**\r\n  \r\n  0 : function with syntax function_name(Maths_exp)\r\n  1 : numbers\r\n  2 : binary operators like * / Mod left associate and same precedence\r\n  3 : Math constant values like e,pi,Cruncher ans\r\n  4 : opening bracket\r\n  5 : closing bracket\r\n  6 : decimal\r\n  7 : function with syntax (Math_exp)function_name\r\n  8: function with syntax function_name(Math_exp1,Math_exp2)\r\n  9 : binary operator like +,-\r\n  10: binary operator like P C or ^\r\n  11: ,\r\n  12: function with , seperated three parameters and third parameter is a string that will be mexp string\r\n  13: variable of Sigma function\r\n */\r\nMexp.addToken = function (newTokens) {\r\n\tfor (var i = 0; i < newTokens.length; i++) {\r\n\t\tvar x = newTokens[i].token.length\r\n\t\tvar temp = -1\r\n\t\tif (newTokens[i].type === Mexp.tokenTypes.FUNCTION_WITH_N_ARGS && newTokens[i].numberOfArguments === undefined) {\r\n\t\t\tnewTokens[i].numberOfArguments = 2\r\n\t\t}\r\n\r\n\t\t// newAr is a specially designed data structure index of 1d array = length of tokens\r\n\t\tnewAr[x] = newAr[x] || []\r\n\t\tfor (var y = 0; y < newAr[x].length; y++) {\r\n\t\t\tif (newTokens[i].token === newAr[x][y]) {\r\n\t\t\t\ttemp = indexOfToken(newAr[x][y], tokens)\r\n\t\t\t\tbreak\r\n\t\t\t}\r\n\t\t}\r\n\t\tif (temp === -1) {\r\n\t\t\ttokens.push(newTokens[i])\r\n\t\t\tnewTokens[i].precedence = preced[newTokens[i].type]\r\n\t\t\tif (newAr.length <= newTokens[i].token.length) {\r\n\t\t\t\tnewAr[newTokens[i].token.length] = []\r\n\t\t\t}\r\n\t\t\tnewAr[newTokens[i].token.length].push(newTokens[i].token)\r\n\t\t} else {\r\n\t\t\t// overwrite\r\n\t\t\ttokens[temp] = newTokens[i]\r\n\t\t\tnewTokens[i].precedence = preced[newTokens[i].type]\r\n\t\t}\r\n\t}\r\n}\r\n\r\nfunction indexOfToken(key, tokens) {\r\n\tfor (var search = 0; search < tokens.length; search++) {\r\n\t\tif (tokens[search].token === key) return search\r\n\t}\r\n\treturn -1\r\n}\r\nfunction tokenize(string) {\r\n\tvar nodes = []\r\n\tvar length = string.length\r\n\tvar key, x, y\r\n\tfor (var i = 0; i < length; i++) {\r\n\t\tif (i < length - 1 && string[i] === ' ' && string[i + 1] === ' ') {\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tkey = ''\r\n\t\tfor (x = string.length - i > newAr.length - 2 ? newAr.length - 1 : string.length - i; x > 0; x--) {\r\n\t\t\tif (newAr[x] === undefined) continue\r\n\t\t\tfor (y = 0; y < newAr[x].length; y++) {\r\n\t\t\t\tif (match(string, newAr[x][y], i, x)) {\r\n\t\t\t\t\tkey = newAr[x][y]\r\n\t\t\t\t\ty = newAr[x].length\r\n\t\t\t\t\tx = 0\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\ti += key.length - 1\r\n\t\tif (key === '') {\r\n\t\t\tthrow new Mexp.Exception(\"Can't understand after \" + string.slice(i))\r\n\t\t}\r\n\t\tnodes.push(tokens[indexOfToken(key, tokens)])\r\n\t}\r\n\treturn nodes\r\n}\r\n\r\nvar changeSignObj = {\r\n\tvalue: Mexp.math.changeSign,\r\n\ttype: 0,\r\n\tpre: 21,\r\n\tshow: '-',\r\n}\r\nvar closingParObj = {\r\n\tvalue: ')',\r\n\tshow: ')',\r\n\ttype: 5,\r\n\tpre: 0,\r\n}\r\nvar openingParObj = {\r\n\tvalue: '(',\r\n\ttype: 4,\r\n\tpre: 0,\r\n\tshow: '(',\r\n}\r\nMexp.lex = function (inp, tokens) {\r\n\t'use strict'\r\n\r\n\tvar str = [openingParObj]\r\n\r\n\tvar ptc = [] // Parenthesis to close at the beginning is after one token\r\n\tvar inpStr = inp\r\n\tvar allowed = type0\r\n\tvar bracToClose = 0\r\n\tvar asterick = empty\r\n\tvar prevKey = ''\r\n\tvar i\r\n\tif (typeof tokens !== 'undefined') {\r\n\t\tMexp.addToken(tokens)\r\n\t}\r\n\tvar obj = {}\r\n\tvar nodes = tokenize(inpStr)\r\n\tfor (i = 0; i < nodes.length; i++) {\r\n\t\tvar node = nodes[i]\r\n\t\tif (node.type === 14) {\r\n\t\t\tif (\r\n\t\t\t\ti > 0 &&\r\n\t\t\t\ti < nodes.length - 1 &&\r\n\t\t\t\tnodes[i + 1].type === 1 &&\r\n\t\t\t\t(nodes[i - 1].type === 1 || nodes[i - 1].type === 6)\r\n\t\t\t) {\r\n\t\t\t\tthrow new Mexp.Exception('Unexpected Space')\r\n\t\t\t}\r\n\t\t\tcontinue\r\n\t\t}\r\n\t\tvar cToken = node.token\r\n\t\tvar cType = node.type\r\n\t\tvar cEv = node.value\r\n\t\tvar cPre = node.precedence\r\n\t\tvar cShow = node.show\r\n\t\tvar pre = str[str.length - 1]\r\n\t\tvar j\r\n\t\tfor (j = ptc.length; j--; ) {\r\n\t\t\t// loop over ptc\r\n\t\t\tif (ptc[j] === 0) {\r\n\t\t\t\tif ([0, 2, 3, 4, 5, 9, 11, 12, 13].indexOf(cType) !== -1) {\r\n\t\t\t\t\tif (allowed[cType] !== true) {\r\n\t\t\t\t\t\tthrow new Mexp.Exception(cToken + ' is not allowed after ' + prevKey)\r\n\t\t\t\t\t}\r\n\t\t\t\t\tstr.push(closingParObj)\r\n\t\t\t\t\tallowed = type1\r\n\t\t\t\t\tasterick = type3Asterick\r\n\t\t\t\t\tptc.pop()\r\n\t\t\t\t}\r\n\t\t\t} else break\r\n\t\t}\r\n\t\tif (allowed[cType] !== true) {\r\n\t\t\tthrow new Mexp.Exception(cToken + ' is not allowed after ' + prevKey)\r\n\t\t}\r\n\t\tif (asterick[cType] === true) {\r\n\t\t\tcType = 2\r\n\t\t\tcEv = Mexp.math.mul\r\n\t\t\tcShow = '&times;'\r\n\t\t\tcPre = 3\r\n\t\t\ti = i - 1\r\n\t\t}\r\n\t\tobj = {\r\n\t\t\tvalue: cEv,\r\n\t\t\ttype: cType,\r\n\t\t\tpre: cPre,\r\n\t\t\tshow: cShow,\r\n\t\t\tnumberOfArguments: node.numberOfArguments,\r\n\t\t}\r\n\t\tif (cType === 0) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 2)\r\n\t\t\tstr.push(obj)\r\n\t\t\tif (nodes[i + 1].type !== 4) {\r\n\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\tptc.push(2)\r\n\t\t\t}\r\n\t\t\t// bracToClose++\r\n\t\t} else if (cType === 1) {\r\n\t\t\tif (pre.type === 1) {\r\n\t\t\t\tpre.value += cEv\r\n\t\t\t\tinc(ptc, 1)\r\n\t\t\t} else {\r\n\t\t\t\tstr.push(obj)\r\n\t\t\t}\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type1Asterick\r\n\t\t} else if (cType === 2) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 2)\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 3) {\r\n\t\t\t// constant\r\n\t\t\tstr.push(obj)\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t} else if (cType === 4) {\r\n\t\t\tinc(ptc, 1)\r\n\t\t\tbracToClose++\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 5) {\r\n\t\t\tif (!bracToClose) {\r\n\t\t\t\tthrow new Mexp.Exception('Closing parenthesis are more than opening one, wait What!!!')\r\n\t\t\t}\r\n\t\t\tbracToClose--\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t\tstr.push(obj)\r\n\t\t\tinc(ptc, 1)\r\n\t\t} else if (cType === 6) {\r\n\t\t\tif (pre.hasDec) {\r\n\t\t\t\tthrow new Mexp.Exception('Two decimals are not allowed in one number')\r\n\t\t\t}\r\n\t\t\tif (pre.type !== 1) {\r\n\t\t\t\tpre = {\r\n\t\t\t\t\tvalue: 0,\r\n\t\t\t\t\ttype: 1,\r\n\t\t\t\t\tpre: 0,\r\n\t\t\t\t} // pre needs to be changed as it will the last value now to be safe in later code\r\n\t\t\t\tstr.push(pre)\r\n\t\t\t\t// inc(ptc, 1)\r\n\t\t\t}\r\n\t\t\tallowed = type6\r\n\t\t\tinc(ptc, 1)\r\n\t\t\tasterick = empty\r\n\t\t\tpre.value += cEv\r\n\t\t\tpre.hasDec = true\r\n\t\t} else if (cType === 7) {\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t\tinc(ptc, 1)\r\n\t\t\tstr.push(obj)\r\n\t\t}\r\n\t\tif (cType === 8) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, node.numberOfArguments + 2)\r\n\t\t\tstr.push(obj)\r\n\t\t\t// str.push(openingParObj)\r\n\t\t\tif (nodes[i + 1].type !== 4) {\r\n\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\tptc.push(node.numberOfArguments + 2)\r\n\t\t\t}\r\n\t\t} else if (cType === 9) {\r\n\t\t\tif (pre.type === 9) {\r\n\t\t\t\tif (pre.value === Mexp.math.add) {\r\n\t\t\t\t\tpre.value = cEv\r\n\t\t\t\t\tpre.show = cShow\r\n\t\t\t\t\tinc(ptc, 1)\r\n\t\t\t\t} else if (pre.value === Mexp.math.sub && cShow === '-') {\r\n\t\t\t\t\tpre.value = Mexp.math.add\r\n\t\t\t\t\tpre.show = '+'\r\n\t\t\t\t\tinc(ptc, 1)\r\n\t\t\t\t}\r\n\t\t\t} else if (pre.type !== 5 && pre.type !== 7 && pre.type !== 1 && pre.type !== 3 && pre.type !== 13) {\r\n\t\t\t\t// changesign only when negative is found\r\n\t\t\t\tif (cToken === '-') {\r\n\t\t\t\t\t// do nothing for + token\r\n\t\t\t\t\t// don't add with the above if statement as that will run the else statement of parent if on Ctoken +\r\n\t\t\t\t\tallowed = type0\r\n\t\t\t\t\tasterick = empty\r\n\t\t\t\t\tinc(ptc, 2).push(2)\r\n\t\t\t\t\tstr.push(changeSignObj)\r\n\t\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\tstr.push(obj)\r\n\t\t\t\tinc(ptc, 2)\r\n\t\t\t}\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t} else if (cType === 10) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 2)\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 11) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tstr.push(obj)\r\n\t\t} else if (cType === 12) {\r\n\t\t\tallowed = type0\r\n\t\t\tasterick = empty\r\n\t\t\tinc(ptc, 6)\r\n\t\t\tstr.push(obj)\r\n\t\t\tif (nodes[i + 1].type !== 4) {\r\n\t\t\t\tstr.push(openingParObj)\r\n\t\t\t\tptc.push(6)\r\n\t\t\t}\r\n\t\t} else if (cType === 13) {\r\n\t\t\tallowed = type1\r\n\t\t\tasterick = type3Asterick\r\n\t\t\tstr.push(obj)\r\n\t\t}\r\n\r\n\t\tinc(ptc, -1)\r\n\t\tprevKey = cToken\r\n\t}\r\n\tfor (j = ptc.length; j--; ) {\r\n\t\t// loop over ptc\r\n\t\tstr.push(closingParObj)\r\n\t}\r\n\tif (allowed[5] !== true) {\r\n\t\tthrow new Mexp.Exception('complete the expression')\r\n\t}\r\n\twhile (bracToClose--) {\r\n\t\tstr.push(closingParObj)\r\n\t}\r\n\r\n\tstr.push(closingParObj)\r\n\t//        console.log(str);\r\n\treturn new Mexp(str)\r\n}\r\nmodule.exports = Mexp\r\n"]},"metadata":{},"sourceType":"script"}